[{"/Users/sarori/Coding/switter/src/index.js":"1","/Users/sarori/Coding/switter/src/components/App.js":"2","/Users/sarori/Coding/switter/src/components/Router.js":"3","/Users/sarori/Coding/switter/src/routes/Auth.js":"4","/Users/sarori/Coding/switter/src/routes/Home.js":"5","/Users/sarori/Coding/switter/src/fbase.js":"6"},{"size":209,"mtime":1607904653373,"results":"7","hashOfConfig":"8"},{"size":536,"mtime":1608592645903,"results":"9","hashOfConfig":"8"},{"size":729,"mtime":1608588236578,"results":"10","hashOfConfig":"8"},{"size":1806,"mtime":1608601487323,"results":"11","hashOfConfig":"8"},{"size":87,"mtime":1607623282065,"results":"12","hashOfConfig":"8"},{"size":534,"mtime":1607996847255,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"k4skfr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/sarori/Coding/switter/src/index.js",[],["28","29"],"/Users/sarori/Coding/switter/src/components/App.js",[],"/Users/sarori/Coding/switter/src/components/Router.js",[],"/Users/sarori/Coding/switter/src/routes/Auth.js",["30"],"import React, {useState} from \"react\";\nimport {AuthService} from \"../fbase\";\n\nconst Auth = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    const onChange = (e) => {\n        const  { target : {name, value}} = e;\n        if (name === \"email\") {\n            setEmail(value);\n        } else if (name === \"password\"){\n            setPassword(value);\n        }\n    };\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        try{\n            let data;\n            if (newAccount) {\n                data = await AuthService.createUserWithEmailAndPassword(email, password);\n                console.log(\"Sign in\");\n                setAccount(false);\n            } else {\n                data = await AuthService.signInWithEmailAndPassword(email, password);\n                    console.log(\"Log in\");\n            } \n        } catch(error) {\n                setError(error.message);\n            }        \n    };\n    const toggleAccount = () => {\n        setAccount((prev) => !prev);\n    }\n   \n    return (\n        <div>\n        <form onSubmit={onSubmit}>\n            <input type=\"email\" name=\"email\" value={email} onChange={onChange} placeholder=\"Enter your email\" required />\n            <input type=\"password\" name=\"password\" value={password} onChange={onChange} required />\n            <input type=\"submit\"  onClick={onSubmit} value={newAccount ?  \"Create Account\" : \"Log In\"} />\n        </form>\n        {error}\n        <div>\n            <span onClick={toggleAccount}>{newAccount ? \"Log In\" : \"Create Account\"} </span>\n            <button type=\"button\">Continue with Google</button>\n        </div>\n        </div>\n    );\n};\n\nexport default Auth;","/Users/sarori/Coding/switter/src/routes/Home.js",[],"/Users/sarori/Coding/switter/src/fbase.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":26,"column":17,"nodeType":"37","messageId":"38","endLine":26,"endColumn":21},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]