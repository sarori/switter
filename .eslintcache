[{"/Users/sarori/Coding/switter/src/index.js":"1","/Users/sarori/Coding/switter/src/components/App.js":"2","/Users/sarori/Coding/switter/src/components/Router.js":"3","/Users/sarori/Coding/switter/src/routes/Auth.js":"4","/Users/sarori/Coding/switter/src/routes/Home.js":"5","/Users/sarori/Coding/switter/src/fbase.js":"6","/Users/sarori/Coding/switter/src/routes/Profile.js":"7","/Users/sarori/Coding/switter/src/components/Navigation.js":"8","/Users/sarori/Coding/switter/src/components/Sweet.js":"9","/Users/sarori/Coding/switter/src/components/SweetMaking.js":"10"},{"size":221,"mtime":1634591801499,"results":"11","hashOfConfig":"12"},{"size":698,"mtime":1609369431721,"results":"13","hashOfConfig":"12"},{"size":707,"mtime":1634910521297,"results":"14","hashOfConfig":"12"},{"size":2677,"mtime":1634592966061,"results":"15","hashOfConfig":"12"},{"size":740,"mtime":1634910856535,"results":"16","hashOfConfig":"12"},{"size":798,"mtime":1611337261080,"results":"17","hashOfConfig":"12"},{"size":338,"mtime":1634910663807,"results":"18","hashOfConfig":"12"},{"size":1010,"mtime":1634910584323,"results":"19","hashOfConfig":"12"},{"size":1832,"mtime":1634909848756,"results":"20","hashOfConfig":"12"},{"size":2469,"mtime":1634910255149,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"111jq5o",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sarori/Coding/switter/src/index.js",[],["45","46"],"/Users/sarori/Coding/switter/src/components/App.js",[],"/Users/sarori/Coding/switter/src/components/Router.js",[],"/Users/sarori/Coding/switter/src/routes/Auth.js",["47","48"],"import React, { useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTwitter, faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\"\nimport { AuthService, firebaseInstance } from \"../fbase\"\n\nconst Auth = () => {\n\tconst [email, setEmail] = useState(\"\")\n\tconst [password, setPassword] = useState(\"\")\n\tconst [newAccount, setNewAccount] = useState(true)\n\tconst [error, setError] = useState(\"\")\n\n\tconst toggleAccount = () => setNewAccount((prev) => !prev)\n\tconst onChange = (event) => {\n\t\tconst {\n\t\t\ttarget: { name, value },\n\t\t} = event\n\t\tif (name === \"email\") {\n\t\t\tsetEmail(value)\n\t\t} else if (name === \"password\") {\n\t\t\tsetPassword(value)\n\t\t}\n\t}\n\tconst onSubmit = async (event) => {\n\t\tevent.preventDefault()\n\t\ttry {\n\t\t\tlet data\n\t\t\tif (newAccount) {\n\t\t\t\tdata = await AuthService.createUserWithEmailAndPassword(email, password)\n\t\t\t} else {\n\t\t\t\tdata = await AuthService.signInWithEmailAndPassword(email, password)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetError(error.message)\n\t\t}\n\t}\n\tconst onSocialClick = async (event) => {\n\t\tconst {\n\t\t\ttarget: { name },\n\t\t} = event\n\t\tlet provider\n\t\tif (name === \"google\") {\n\t\t\tprovider = new firebaseInstance.auth.GoogleAuthProvider()\n\t\t} else if (name === \"github\") {\n\t\t\tprovider = new firebaseInstance.auth.GithubAuthProvider()\n\t\t}\n\t\tconst data = await AuthService.signInWithPopup(provider)\n\t}\n\treturn (\n\t\t<div className=\"authContainer\">\n\t\t\t<FontAwesomeIcon\n\t\t\t\ticon={faTwitter}\n\t\t\t\tcolor={\"#04AAFF\"}\n\t\t\t\tsize=\"3x\"\n\t\t\t\tstyle={{ marginBottom: 30 }}\n\t\t\t/>\n\t\t\t<div>\n\t\t\t\t<form onSubmit={onSubmit} className=\"container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tclassName=\"authInput\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tclassName=\"authInput\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tvalue={newAccount ? \"Create Account\" : \"Log In\"}\n\t\t\t\t\t\tonClick={onSubmit}\n\t\t\t\t\t\tclassName=\"authSubmit\"\n\t\t\t\t\t/>\n\t\t\t\t\t{error && <span className=\"authError\">{error}</span>}\n\t\t\t\t</form>\n\t\t\t\t<span onClick={toggleAccount} className=\"authSwitch\">\n\t\t\t\t\t{newAccount ? \"Sign in\" : \"Create Account\"}\n\t\t\t\t</span>\n\n\t\t\t\t<div className=\"authBtns\">\n\t\t\t\t\t<button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n\t\t\t\t\t\tContinue with Google <FontAwesomeIcon icon={faGoogle} />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n\t\t\t\t\t\tContinue with Github <FontAwesomeIcon icon={faGithub} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Auth\n","/Users/sarori/Coding/switter/src/routes/Home.js",[],"/Users/sarori/Coding/switter/src/fbase.js",[],"/Users/sarori/Coding/switter/src/routes/Profile.js",[],"/Users/sarori/Coding/switter/src/components/Navigation.js",[],"/Users/sarori/Coding/switter/src/components/Sweet.js",["49"],"import { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { dbService } from \"../fbase\"\n\nconst Sweet = ({ isOwner, sweetObj }) => {\n\tconst [editing, setEditing] = useState(false)\n\tconst [newSweet, setNewSweet] = useState(sweetObj.text)\n\tconst onDeleteClick = async (event) => {\n\t\tconst ok = window.confirm(\"Do you wanna delete?\")\n\t\tif (ok) {\n\t\t\tawait dbService.doc(`sweets/${sweetObj.id}`).delete()\n\t\t}\n\t}\n\tconst onSubmit = async (event) => {\n\t\tevent.preventDefault()\n\t\tconst updateData = await dbService.doc(`sweets/${sweetObj.id}`)\n\t\tupdateData.update({\n\t\t\ttext: newSweet,\n\t\t})\n\t\ttoToggle(editing)\n\t}\n\tconst toToggle = () => {\n\t\tsetEditing((prev) => !prev)\n\t}\n\tconst onChange = (event) => {\n\t\tconst {\n\t\t\ttarget: { value },\n\t\t} = event\n\t\tsetNewSweet(value)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"nweet\">\n\t\t\t\t{editing ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<form onSubmit={onSubmit} className=\"container nweetEdit\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tvalue={newSweet}\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\t\t\tclassName=\"formInput\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<span onClick={onSubmit} className=\"formBtn\">\n\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span onClick={toToggle} className=\"nweet__actions\">\n\t\t\t\t\t\t\tCancle\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h4>{sweetObj.text}</h4>\n\t\t\t\t\t\t{sweetObj.attachmentUrl && <img src={sweetObj.attachmentUrl} />}\n\t\t\t\t\t\t{isOwner && (\n\t\t\t\t\t\t\t<div className=\"nweet__actions\">\n\t\t\t\t\t\t\t\t<span onClick={toToggle}>\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPencilAlt} />\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span onClick={onDeleteClick}>\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faTrash} />\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default Sweet\n","/Users/sarori/Coding/switter/src/components/SweetMaking.js",["50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":30,"column":5,"nodeType":"57","messageId":"58","endLine":30,"endColumn":9},{"ruleId":"55","severity":1,"message":"56","line":46,"column":9,"nodeType":"57","messageId":"58","endLine":46,"endColumn":13},{"ruleId":"59","severity":1,"message":"60","line":58,"column":34,"nodeType":"61","endLine":58,"endColumn":70},{"ruleId":"59","severity":1,"message":"60","line":84,"column":6,"nodeType":"61","endLine":89,"endColumn":8},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]