[{"/Users/sarori/Coding/switter/src/index.js":"1","/Users/sarori/Coding/switter/src/components/App.js":"2","/Users/sarori/Coding/switter/src/components/Router.js":"3","/Users/sarori/Coding/switter/src/routes/Auth.js":"4","/Users/sarori/Coding/switter/src/routes/Home.js":"5","/Users/sarori/Coding/switter/src/fbase.js":"6","/Users/sarori/Coding/switter/src/routes/Profile.js":"7","/Users/sarori/Coding/switter/src/components/Navigation.js":"8","/Users/sarori/Coding/switter/src/components/Sweet.js":"9","/Users/sarori/Coding/switter/src/components/SweetMaking.js":"10"},{"size":221,"mtime":1634591801499,"results":"11","hashOfConfig":"12"},{"size":1085,"mtime":1634912834435,"results":"13","hashOfConfig":"12"},{"size":948,"mtime":1634914059669,"results":"14","hashOfConfig":"12"},{"size":2677,"mtime":1634592966061,"results":"15","hashOfConfig":"12"},{"size":766,"mtime":1634911983276,"results":"16","hashOfConfig":"12"},{"size":798,"mtime":1611337261080,"results":"17","hashOfConfig":"12"},{"size":1228,"mtime":1634913906298,"results":"18","hashOfConfig":"12"},{"size":1010,"mtime":1634910584323,"results":"19","hashOfConfig":"12"},{"size":1787,"mtime":1634911757066,"results":"20","hashOfConfig":"12"},{"size":2469,"mtime":1634911173005,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"111jq5o",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/sarori/Coding/switter/src/index.js",[],["47","48"],"/Users/sarori/Coding/switter/src/components/App.js",["49"],"import React, { useState, useEffect } from \"react\"\nimport AppRouter from \"./Router\"\nimport { AuthService } from \"../fbase\"\n// import { db } from \"../fbase\"\n\nconst App = () => {\n\tconst [init, setInit] = useState(false)\n\tconst [isLogged, setIsLogged] = useState(false)\n\tconst [userObj, setUserObj] = useState(null)\n\tuseEffect(() => {\n\t\tAuthService.onAuthStateChanged((user) => {\n\t\t\tif (user) {\n\t\t\t\tsetIsLogged(true)\n\t\t\t\tsetUserObj({\n\t\t\t\t\tdisplayName: user.displayName,\n\t\t\t\t\tuid: user.uid,\n\t\t\t\t\tupdateProfile: (args) => user.updateProfile(args),\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tsetIsLogged(false)\n\t\t\t}\n\t\t\tsetInit(true)\n\t\t})\n\t}, [])\n\tconst refreshUser = () => {\n\t\tconst user = AuthService.currentUser\n\t\tsetUserObj({\n\t\t\tdisplayName: user.displayName,\n\t\t\tuid: user.uid,\n\t\t\tupdateProfile: (args) => user.updateProfile(args),\n\t\t})\n\t}\n\treturn (\n\t\t<>\n\t\t\t{init ? (\n\t\t\t\t<AppRouter\n\t\t\t\t\trefreshUser={refreshUser}\n\t\t\t\t\tisLogged={Boolean(userObj)}\n\t\t\t\t\tuserObj={userObj}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t\"Initializing...\"\n\t\t\t)}\n\t\t\t<footer> &copy; {new Date().getFullYear()} Twitter</footer>\n\t\t</>\n\t)\n}\n\nexport default App\n",["50","51"],"/Users/sarori/Coding/switter/src/components/Router.js",[],"/Users/sarori/Coding/switter/src/routes/Auth.js",["52","53"],"import React, { useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTwitter, faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\"\nimport { AuthService, firebaseInstance } from \"../fbase\"\n\nconst Auth = () => {\n\tconst [email, setEmail] = useState(\"\")\n\tconst [password, setPassword] = useState(\"\")\n\tconst [newAccount, setNewAccount] = useState(true)\n\tconst [error, setError] = useState(\"\")\n\n\tconst toggleAccount = () => setNewAccount((prev) => !prev)\n\tconst onChange = (event) => {\n\t\tconst {\n\t\t\ttarget: { name, value },\n\t\t} = event\n\t\tif (name === \"email\") {\n\t\t\tsetEmail(value)\n\t\t} else if (name === \"password\") {\n\t\t\tsetPassword(value)\n\t\t}\n\t}\n\tconst onSubmit = async (event) => {\n\t\tevent.preventDefault()\n\t\ttry {\n\t\t\tlet data\n\t\t\tif (newAccount) {\n\t\t\t\tdata = await AuthService.createUserWithEmailAndPassword(email, password)\n\t\t\t} else {\n\t\t\t\tdata = await AuthService.signInWithEmailAndPassword(email, password)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetError(error.message)\n\t\t}\n\t}\n\tconst onSocialClick = async (event) => {\n\t\tconst {\n\t\t\ttarget: { name },\n\t\t} = event\n\t\tlet provider\n\t\tif (name === \"google\") {\n\t\t\tprovider = new firebaseInstance.auth.GoogleAuthProvider()\n\t\t} else if (name === \"github\") {\n\t\t\tprovider = new firebaseInstance.auth.GithubAuthProvider()\n\t\t}\n\t\tconst data = await AuthService.signInWithPopup(provider)\n\t}\n\treturn (\n\t\t<div className=\"authContainer\">\n\t\t\t<FontAwesomeIcon\n\t\t\t\ticon={faTwitter}\n\t\t\t\tcolor={\"#04AAFF\"}\n\t\t\t\tsize=\"3x\"\n\t\t\t\tstyle={{ marginBottom: 30 }}\n\t\t\t/>\n\t\t\t<div>\n\t\t\t\t<form onSubmit={onSubmit} className=\"container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tclassName=\"authInput\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tclassName=\"authInput\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tvalue={newAccount ? \"Create Account\" : \"Log In\"}\n\t\t\t\t\t\tonClick={onSubmit}\n\t\t\t\t\t\tclassName=\"authSubmit\"\n\t\t\t\t\t/>\n\t\t\t\t\t{error && <span className=\"authError\">{error}</span>}\n\t\t\t\t</form>\n\t\t\t\t<span onClick={toggleAccount} className=\"authSwitch\">\n\t\t\t\t\t{newAccount ? \"Sign in\" : \"Create Account\"}\n\t\t\t\t</span>\n\n\t\t\t\t<div className=\"authBtns\">\n\t\t\t\t\t<button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n\t\t\t\t\t\tContinue with Google <FontAwesomeIcon icon={faGoogle} />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n\t\t\t\t\t\tContinue with Github <FontAwesomeIcon icon={faGithub} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Auth\n","/Users/sarori/Coding/switter/src/routes/Home.js",[],"/Users/sarori/Coding/switter/src/fbase.js",[],"/Users/sarori/Coding/switter/src/routes/Profile.js",[],"/Users/sarori/Coding/switter/src/components/Navigation.js",[],"/Users/sarori/Coding/switter/src/components/Sweet.js",["54"],"/Users/sarori/Coding/switter/src/components/SweetMaking.js",["55"],"import { useState } from \"react\"\nimport { dbService, storageService } from \"../fbase\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\"\n\nconst SweetMaking = ({ userObj }) => {\n\tconst [sweet, setSweet] = useState(\"\")\n\tconst [attachment, setAttachment] = useState(\"\")\n\tconst onChange = (event) => {\n\t\tconst {\n\t\t\ttarget: { value },\n\t\t} = event\n\t\tsetSweet(value)\n\t}\n\tconst onSubmit = async (event) => {\n\t\tif (sweet === \"\") {\n\t\t\treturn\n\t\t}\n\t\tevent.preventDefault()\n\t\tlet attachmentUrl = \"\"\n\t\tif (attachment !== \"\") {\n\t\t\tconst attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\n\t\t\tconst response = await attachmentRef.putString(attachment, \"data_url\")\n\t\t\tattachmentUrl = await response.ref.getDownloadURL()\n\t\t}\n\t\tconst sweetObj = {\n\t\t\ttext: sweet,\n\t\t\tcreatedAt: Date.now(),\n\t\t\tcreatorId: userObj.uid,\n\t\t\tattachmentUrl,\n\t\t}\n\t\tawait dbService.collection(\"sweets\").add(sweetObj)\n\t\tsetSweet(\"\")\n\t\tsetAttachment(\"\")\n\t}\n\tconst onFileChange = (event) => {\n\t\tconst {\n\t\t\ttarget: { files },\n\t\t} = event\n\t\tconst theFile = files[0]\n\t\tconst reader = new FileReader()\n\t\treader.onloadend = (finishedEvent) => {\n\t\t\tconst {\n\t\t\t\tcurrentTarget: { result },\n\t\t\t} = finishedEvent\n\t\t\tsetAttachment(result)\n\t\t}\n\t\tif (Boolean(theFile)) {\n\t\t\treader.readAsDataURL(theFile)\n\t\t}\n\t}\n\tconst onClearAttachment = () => {\n\t\tsetAttachment(\"\")\n\t}\n\treturn (\n\t\t<form onSubmit={onSubmit} className=\"factoryForm\">\n\t\t\t<div className=\"factoryInput__container\">\n\t\t\t\t<input\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tvalue={sweet}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Share your day\"\n\t\t\t\t\tmaxLength={120}\n\t\t\t\t\tclassName=\"factoryInput__input\"\n\t\t\t\t/>\n\t\t\t\t<input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n\t\t\t</div>\n\t\t\t<label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n\t\t\t\t<span>add photos</span>\n\t\t\t\t<FontAwesomeIcon icon={faPlus} />\n\t\t\t</label>\n\t\t\t<input\n\t\t\t\tid=\"attach-file\"\n\t\t\t\ttype=\"file\"\n\t\t\t\taccept=\"image/*\"\n\t\t\t\tonChange={onFileChange}\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: 0,\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t{attachment && (\n\t\t\t\t<div className=\"factoryForm__attachment\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={attachment}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundImage: attachment,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n\t\t\t\t\t\t<span>Remove</span>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faTimes} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</form>\n\t)\n}\n\nexport default SweetMaking\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":8,"column":9,"nodeType":"62","messageId":"63","endLine":8,"endColumn":17},{"ruleId":"56","replacedBy":"64"},{"ruleId":"58","replacedBy":"65"},{"ruleId":"60","severity":1,"message":"66","line":30,"column":5,"nodeType":"62","messageId":"63","endLine":30,"endColumn":9},{"ruleId":"60","severity":1,"message":"66","line":46,"column":9,"nodeType":"62","messageId":"63","endLine":46,"endColumn":13},{"ruleId":"67","severity":1,"message":"68","line":57,"column":33,"nodeType":"69","endLine":57,"endColumn":69},{"ruleId":"67","severity":1,"message":"68","line":84,"column":6,"nodeType":"69","endLine":89,"endColumn":8},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'isLogged' is assigned a value but never used.","Identifier","unusedVar",["70"],["71"],"'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]